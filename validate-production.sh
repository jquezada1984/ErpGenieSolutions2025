#!/bin/bash

echo "üöÄ Iniciando validaci√≥n completa del proyecto ERP..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar resultados
show_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        exit 1
    fi
}

echo -e "\n${YELLOW}üì¶ Validando Frontend (React)...${NC}"
cd frontReact
npm install
show_result $? "Dependencias del frontend instaladas"

npm run lint
show_result $? "Linting del frontend completado"

npm run build
show_result $? "Build del frontend completado"

cd ..

echo -e "\n${YELLOW}üåê Validando Gateway API...${NC}"
cd gateway-api
npm install
show_result $? "Dependencias del Gateway instaladas"

# Verificar que el servidor puede iniciar (timeout de 10 segundos)
timeout 10s npm start &
GATEWAY_PID=$!
sleep 2
if kill -0 $GATEWAY_PID 2>/dev/null; then
    kill $GATEWAY_PID
    show_result 0 "Gateway API puede iniciar correctamente"
else
    show_result 1 "Gateway API no puede iniciar"
fi

cd ..

echo -e "\n${YELLOW}üêç Validando Microservicio Python...${NC}"
cd InicioPython

# Verificar sintaxis Python
python -m py_compile app.py
show_result $? "Sintaxis de app.py v√°lida"

python -m py_compile models/*.py
show_result $? "Sintaxis de modelos v√°lida"

python -m py_compile api/*.py
show_result $? "Sintaxis de APIs v√°lida"

python -m py_compile schemas/*.py
show_result $? "Sintaxis de esquemas v√°lida"

# Verificar que la aplicaci√≥n puede iniciar (timeout de 10 segundos)
timeout 10s python app.py &
PYTHON_PID=$!
sleep 2
if kill -0 $PYTHON_PID 2>/dev/null; then
    kill $PYTHON_PID
    show_result 0 "Microservicio Python puede iniciar correctamente"
else
    show_result 1 "Microservicio Python no puede iniciar"
fi

cd ..

echo -e "\n${YELLOW}‚ö° Validando Microservicio NestJS...${NC}"
cd InicioNestJs
npm install
show_result $? "Dependencias de NestJS instaladas"

npm run lint
show_result $? "Linting de NestJS completado"

npm run build
show_result $? "Build de NestJS completado"

cd ..

echo -e "\n${YELLOW}üîß Validando archivos de configuraci√≥n...${NC}"

# Verificar variables de entorno
if [ -f "frontReact/.env" ]; then
    echo -e "${GREEN}‚úÖ Frontend .env encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Frontend .env no encontrado (usar .env.example)${NC}"
fi

if [ -f "gateway-api/.env" ]; then
    echo -e "${GREEN}‚úÖ Gateway .env encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Gateway .env no encontrado (usar .env.example)${NC}"
fi

if [ -f "InicioPython/.env" ]; then
    echo -e "${GREEN}‚úÖ Python .env encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Python .env no encontrado (usar .env.example)${NC}"
fi

if [ -f "InicioNestJs/.env" ]; then
    echo -e "${GREEN}‚úÖ NestJS .env encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  NestJS .env no encontrado (usar .env.example)${NC}"
fi

echo -e "\n${GREEN}üéâ Validaci√≥n completa finalizada exitosamente!${NC}"
echo -e "${YELLOW}üìã Checklist para producci√≥n:${NC}"
echo "  1. ‚úÖ Todas las dependencias instaladas"
echo "  2. ‚úÖ Sintaxis validada"
echo "  3. ‚úÖ Builds completados"
echo "  4. ‚úÖ Servidores pueden iniciar"
echo "  5. ‚ö†Ô∏è  Verificar variables de entorno"
echo "  6. ‚ö†Ô∏è  Verificar conexi√≥n a base de datos"
echo "  7. ‚ö†Ô∏è  Configurar CORS para producci√≥n"
echo "  8. ‚ö†Ô∏è  Configurar SSL/HTTPS"
echo "  9. ‚ö†Ô∏è  Configurar logs y monitoreo"
echo "  10. ‚ö†Ô∏è Configurar backup de base de datos" 